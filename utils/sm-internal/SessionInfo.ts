/**
 * Do not edit this file it is auto-generated by io-utils / gen-api-models.
 * See https://github.com/pagopa/io-utils
 */
/* eslint-disable  */

import * as t from "io-ts";
import { DateFromString } from "@pagopa/ts-commons/lib/dates";
import { enumType } from "@pagopa/ts-commons/lib/types";

export enum TypeEnum {
  "LV" = "LV",

  "LEGACY" = "LEGACY"
}

/**
 * Info about an user session
 */

/**
 * Inactive session
 */

// required attributes
const SessionInfo1R = t.interface({
  active: t.literal(false)
});

// optional attributes
const SessionInfo1O = t.partial({});

export const SessionInfo1 = t.intersection(
  [SessionInfo1R, SessionInfo1O],
  "SessionInfo1"
);

export type SessionInfo1 = t.TypeOf<typeof SessionInfo1>;

/**
 * Active session
 */

// required attributes
const SessionInfo2R = t.interface({
  active: t.literal(true),

  expiration_date: DateFromString,

  type: enumType<TypeEnum>(TypeEnum, "type")
});

// optional attributes
const SessionInfo2O = t.partial({});

export const SessionInfo2 = t.intersection(
  [SessionInfo2R, SessionInfo2O],
  "SessionInfo2"
);

export type SessionInfo2 = t.TypeOf<typeof SessionInfo2>;

export const SessionInfo = t.union([SessionInfo1, SessionInfo2], "SessionInfo");

export type SessionInfo = t.TypeOf<typeof SessionInfo>;
