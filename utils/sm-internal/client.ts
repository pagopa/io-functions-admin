/**
 * Do not edit this file it is auto-generated by io-utils / gen-api-models.
 * See https://github.com/pagopa/io-utils
 */
/* eslint-disable  */
// TODO(IOPID-1648): Move to generated client

import { withoutUndefinedValues } from "@pagopa/ts-commons/lib/types";
import {
  RequestParams,
  TypeofApiCall,
  TypeofApiParams,
  createFetchRequestForApi,
  ReplaceRequestParams
} from "@pagopa/ts-commons/lib/requests";
import { identity } from "fp-ts/lib/function";

import {
  InfoT,
  infoDefaultDecoder,
  GetSessionT,
  getSessionDefaultDecoder,
  AuthLockT,
  authLockDefaultDecoder,
  LockUserSessionT,
  lockUserSessionDefaultDecoder,
  UnlockUserSessionT,
  unlockUserSessionDefaultDecoder,
  ReleaseAuthLockT,
  releaseAuthLockDefaultDecoder,
  DeleteUserSessionT,
  deleteUserSessionDefaultDecoder,
  GetUserSessionStateT,
  getUserSessionStateDefaultDecoder
} from "./requestTypes";

// This is a placeholder for undefined when dealing with object keys
// Typescript doesn't perform well when narrowing a union type which includes string and undefined
// (example: "foo" | "bar" | undefined)
// We use this as a placeholder for type parameters indicating "no key"
type __UNDEFINED_KEY = "_____";

export type ApiOperation = TypeofApiCall<InfoT> &
  TypeofApiCall<GetSessionT> &
  TypeofApiCall<AuthLockT> &
  TypeofApiCall<LockUserSessionT> &
  TypeofApiCall<UnlockUserSessionT> &
  TypeofApiCall<ReleaseAuthLockT> &
  TypeofApiCall<DeleteUserSessionT> &
  TypeofApiCall<GetUserSessionStateT>;

export type ParamKeys = keyof (TypeofApiParams<InfoT> &
  TypeofApiParams<GetSessionT> &
  TypeofApiParams<AuthLockT> &
  TypeofApiParams<LockUserSessionT> &
  TypeofApiParams<UnlockUserSessionT> &
  TypeofApiParams<ReleaseAuthLockT> &
  TypeofApiParams<DeleteUserSessionT> &
  TypeofApiParams<GetUserSessionStateT>);

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type OmitApiCallParams<
  ApiT,
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = (
  op: TypeofApiCall<ApiT>
) => K extends __UNDEFINED_KEY
  ? TypeofApiCall<ApiT>
  : TypeofApiCall<ReplaceRequestParams<ApiT, Omit<RequestParams<ApiT>, K>>>;

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type WithDefaultsT<
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = OmitApiCallParams<
  | InfoT
  | GetSessionT
  | AuthLockT
  | LockUserSessionT
  | UnlockUserSessionT
  | ReleaseAuthLockT
  | DeleteUserSessionT
  | GetUserSessionStateT,
  K
>;

/**
 * Defines a collection of api operations
 * @param K name of the parameters that the Clients masks from the operations
 */
export type Client<
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = K extends __UNDEFINED_KEY
  ? {
      readonly info: TypeofApiCall<InfoT>;

      readonly getSession: TypeofApiCall<GetSessionT>;

      readonly authLock: TypeofApiCall<AuthLockT>;

      readonly lockUserSession: TypeofApiCall<LockUserSessionT>;

      readonly unlockUserSession: TypeofApiCall<UnlockUserSessionT>;

      readonly releaseAuthLock: TypeofApiCall<ReleaseAuthLockT>;

      readonly deleteUserSession: TypeofApiCall<DeleteUserSessionT>;

      readonly getUserSessionState: TypeofApiCall<GetUserSessionStateT>;
    }
  : {
      readonly info: TypeofApiCall<
        ReplaceRequestParams<InfoT, Omit<RequestParams<InfoT>, K>>
      >;

      readonly getSession: TypeofApiCall<
        ReplaceRequestParams<GetSessionT, Omit<RequestParams<GetSessionT>, K>>
      >;

      readonly authLock: TypeofApiCall<
        ReplaceRequestParams<AuthLockT, Omit<RequestParams<AuthLockT>, K>>
      >;

      readonly lockUserSession: TypeofApiCall<
        ReplaceRequestParams<
          LockUserSessionT,
          Omit<RequestParams<LockUserSessionT>, K>
        >
      >;

      readonly unlockUserSession: TypeofApiCall<
        ReplaceRequestParams<
          UnlockUserSessionT,
          Omit<RequestParams<UnlockUserSessionT>, K>
        >
      >;

      readonly releaseAuthLock: TypeofApiCall<
        ReplaceRequestParams<
          ReleaseAuthLockT,
          Omit<RequestParams<ReleaseAuthLockT>, K>
        >
      >;

      readonly deleteUserSession: TypeofApiCall<
        ReplaceRequestParams<
          DeleteUserSessionT,
          Omit<RequestParams<DeleteUserSessionT>, K>
        >
      >;

      readonly getUserSessionState: TypeofApiCall<
        ReplaceRequestParams<
          GetUserSessionStateT,
          Omit<RequestParams<GetUserSessionStateT>, K>
        >
      >;
    };

/**
 * Create an instance of a client
 * @param params hash map of parameters thata define the client:
 *  - baseUrl: the base url for every api call (required)
 *  - fetchApi: an implementation of the fetch() web API, depending on the platform (required)
 *  - basePath: optional path to be appended to the baseUrl
 *  - withDefaults: optional adapter to be applied to every operation, to omit some paramenters
 * @returns a collection of api operations
 */
export function createClient<K extends ParamKeys>(params: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults: WithDefaultsT<K>;
  basePath?: string;
}): Client<K>;
export function createClient(params: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults?: undefined;
  basePath?: string;
}): Client;
export function createClient<K extends ParamKeys>({
  baseUrl,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi,
  withDefaults,
  basePath = "/api/v1"
}: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults?: WithDefaultsT<K>;
  basePath?: string;
}) {
  const options = {
    baseUrl,
    fetchApi
  };

  const infoT: ReplaceRequestParams<InfoT, RequestParams<InfoT>> = {
    method: "get",

    headers: ({ ["ApiKeyAuth"]: ApiKeyAuth }) => ({
      "X-Functions-Key": ApiKeyAuth
    }),
    response_decoder: infoDefaultDecoder(),
    url: ({}) => `${basePath}/info`,

    query: () => withoutUndefinedValues({})
  };
  const info: TypeofApiCall<InfoT> = createFetchRequestForApi(infoT, options);

  const getSessionT: ReplaceRequestParams<
    GetSessionT,
    RequestParams<GetSessionT>
  > = {
    method: "get",

    headers: ({ ["ApiKeyAuth"]: ApiKeyAuth }) => ({
      "X-Functions-Key": ApiKeyAuth
    }),
    response_decoder: getSessionDefaultDecoder(),
    url: ({ ["fiscalCode"]: fiscalCode }) =>
      `${basePath}/sessions/${fiscalCode}`,

    query: ({ ["token"]: token }) =>
      withoutUndefinedValues({ ["token"]: token })
  };
  const getSession: TypeofApiCall<GetSessionT> = createFetchRequestForApi(
    getSessionT,
    options
  );

  const authLockT: ReplaceRequestParams<AuthLockT, RequestParams<AuthLockT>> = {
    method: "post",

    headers: ({ ["ApiKeyAuth"]: ApiKeyAuth }) => ({
      "X-Functions-Key": ApiKeyAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: authLockDefaultDecoder(),
    url: ({ ["fiscalCode"]: fiscalCode }) =>
      `${basePath}/auth/${fiscalCode}/lock`,

    body: ({ ["body"]: body }) =>
      body?.constructor?.name === "Readable" ||
      body?.constructor?.name === "ReadableStream"
        ? (body as ReadableStream)
        : body?.constructor?.name === "Buffer"
        ? (body as Buffer)
        : JSON.stringify(body),

    query: ({ ["token"]: token }) =>
      withoutUndefinedValues({ ["token"]: token })
  };
  const authLock: TypeofApiCall<AuthLockT> = createFetchRequestForApi(
    authLockT,
    options
  );

  const lockUserSessionT: ReplaceRequestParams<
    LockUserSessionT,
    RequestParams<LockUserSessionT>
  > = {
    method: "post",

    headers: ({ ["ApiKeyAuth"]: ApiKeyAuth }) => ({
      "X-Functions-Key": ApiKeyAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: lockUserSessionDefaultDecoder(),
    url: ({ ["fiscalCode"]: fiscalCode }) =>
      `${basePath}/sessions/${fiscalCode}/lock`,

    body: () => "{}",

    query: ({ ["token"]: token }) =>
      withoutUndefinedValues({ ["token"]: token })
  };
  const lockUserSession: TypeofApiCall<LockUserSessionT> = createFetchRequestForApi(
    lockUserSessionT,
    options
  );

  const unlockUserSessionT: ReplaceRequestParams<
    UnlockUserSessionT,
    RequestParams<UnlockUserSessionT>
  > = {
    method: "delete",

    headers: ({ ["ApiKeyAuth"]: ApiKeyAuth }) => ({
      "X-Functions-Key": ApiKeyAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: unlockUserSessionDefaultDecoder(),
    url: ({ ["fiscalCode"]: fiscalCode }) =>
      `${basePath}/sessions/${fiscalCode}/lock`,

    query: ({ ["token"]: token }) =>
      withoutUndefinedValues({ ["token"]: token })
  };
  const unlockUserSession: TypeofApiCall<UnlockUserSessionT> = createFetchRequestForApi(
    unlockUserSessionT,
    options
  );

  const releaseAuthLockT: ReplaceRequestParams<
    ReleaseAuthLockT,
    RequestParams<ReleaseAuthLockT>
  > = {
    method: "post",

    headers: ({ ["ApiKeyAuth"]: ApiKeyAuth }) => ({
      "X-Functions-Key": ApiKeyAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: releaseAuthLockDefaultDecoder(),
    url: ({ ["fiscalCode"]: fiscalCode }) =>
      `${basePath}/auth/${fiscalCode}/release-lock`,

    body: ({ ["body"]: body }) =>
      body?.constructor?.name === "Readable" ||
      body?.constructor?.name === "ReadableStream"
        ? (body as ReadableStream)
        : body?.constructor?.name === "Buffer"
        ? (body as Buffer)
        : JSON.stringify(body),

    query: ({ ["token"]: token }) =>
      withoutUndefinedValues({ ["token"]: token })
  };
  const releaseAuthLock: TypeofApiCall<ReleaseAuthLockT> = createFetchRequestForApi(
    releaseAuthLockT,
    options
  );

  const deleteUserSessionT: ReplaceRequestParams<
    DeleteUserSessionT,
    RequestParams<DeleteUserSessionT>
  > = {
    method: "post",

    headers: ({ ["ApiKeyAuth"]: ApiKeyAuth }) => ({
      "X-Functions-Key": ApiKeyAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: deleteUserSessionDefaultDecoder(),
    url: ({ ["fiscalCode"]: fiscalCode }) =>
      `${basePath}/sessions/${fiscalCode}/logout`,

    body: () => "{}",

    query: ({ ["token"]: token }) =>
      withoutUndefinedValues({ ["token"]: token })
  };
  const deleteUserSession: TypeofApiCall<DeleteUserSessionT> = createFetchRequestForApi(
    deleteUserSessionT,
    options
  );

  const getUserSessionStateT: ReplaceRequestParams<
    GetUserSessionStateT,
    RequestParams<GetUserSessionStateT>
  > = {
    method: "get",

    headers: ({ ["ApiKeyAuth"]: ApiKeyAuth }) => ({
      "X-Functions-Key": ApiKeyAuth
    }),
    response_decoder: getUserSessionStateDefaultDecoder(),
    url: ({ ["fiscalCode"]: fiscalCode }) =>
      `${basePath}/sessions/${fiscalCode}/state`,

    query: ({ ["token"]: token }) =>
      withoutUndefinedValues({ ["token"]: token })
  };
  const getUserSessionState: TypeofApiCall<GetUserSessionStateT> = createFetchRequestForApi(
    getUserSessionStateT,
    options
  );

  return {
    info: (withDefaults || identity)(info),
    getSession: (withDefaults || identity)(getSession),
    authLock: (withDefaults || identity)(authLock),
    lockUserSession: (withDefaults || identity)(lockUserSession),
    unlockUserSession: (withDefaults || identity)(unlockUserSession),
    releaseAuthLock: (withDefaults || identity)(releaseAuthLock),
    deleteUserSession: (withDefaults || identity)(deleteUserSession),
    getUserSessionState: (withDefaults || identity)(getUserSessionState)
  };
}
