/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/pagopa/italia-utils
 */
/* tslint:disable */

import {
  RequestParams,
  TypeofApiCall,
  createFetchRequestForApi,
  ReplaceRequestParams,
  ApiHeaderJson,
  TypeofApiParams
} from "italia-ts-commons/lib/requests";

import {
  LockUserSessionT,
  lockUserSessionDefaultDecoder,
  UnlockUserSessionT,
  unlockUserSessionDefaultDecoder
} from "../generated/session-api/requestTypes";
import { identity } from "fp-ts/lib/function";

export type ApiOperation = TypeofApiCall<LockUserSessionT> &
  TypeofApiCall<UnlockUserSessionT>;

export type ParamKeys = keyof (TypeofApiParams<LockUserSessionT> &
  TypeofApiParams<UnlockUserSessionT>);

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type OmitApiCallParams<
  ApiT,
  K extends ParamKeys | undefined = undefined
> = (
  op: TypeofApiCall<ApiT>
) => K extends string
  ? TypeofApiCall<ReplaceRequestParams<ApiT, Omit<RequestParams<ApiT>, K>>>
  : TypeofApiCall<ApiT>;

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type WithDefaultsT<
  K extends ParamKeys | undefined = undefined
> = OmitApiCallParams<LockUserSessionT | UnlockUserSessionT, K>;

/**
 * Defines a collection of api operations
 * @param K name of the parameters that the Clients masks from the operations
 */
export type Client<K extends ParamKeys | undefined = undefined> = {
  readonly lockUserSession: TypeofApiCall<
    ReplaceRequestParams<
      LockUserSessionT,
      Omit<RequestParams<LockUserSessionT>, K>
    >
  >;

  readonly unlockUserSession: TypeofApiCall<
    ReplaceRequestParams<
      UnlockUserSessionT,
      Omit<RequestParams<UnlockUserSessionT>, K>
    >
  >;
};

/**
 * Create an instance of a client
 * @param params hash map of parameters thata define the client:
 *  - baseUrl: the base url for every api call (required)
 *  - fetchApi: an implementation of the fetch() web API, depending on the platform (required)
 *  - basePath: optional path to be appended to the baseUrl
 *  - withDefaults: optional adapter to be applied to every operation, to omit some paramenters
 * @returns a collection of api operations
 */
export function createClient<K extends ParamKeys>(params: {
  baseUrl: string;
  // tslint:disable-next-line:no-any
  fetchApi: typeof fetch;
  withDefaults: WithDefaultsT<K>;
  basePath?: string;
}): Client<K>;
export function createClient(params: {
  baseUrl: string;
  // tslint:disable-next-line:no-any
  fetchApi: typeof fetch;
  withDefaults?: undefined;
  basePath?: string;
}): Client;
export function createClient<K extends ParamKeys>({
  baseUrl,
  // tslint:disable-next-line:no-any
  fetchApi,
  withDefaults,
  basePath = "/api/v1"
}: {
  baseUrl: string;
  // tslint:disable-next-line:no-any
  fetchApi: typeof fetch;
  withDefaults?: WithDefaultsT<K>;

  basePath?: string;
}) {
  const options = {
    baseUrl,
    fetchApi
  };

  const lockUserSessionT: ReplaceRequestParams<
    LockUserSessionT,
    RequestParams<LockUserSessionT>
  > = {
    method: "post",

    headers: ApiHeaderJson,

    response_decoder: lockUserSessionDefaultDecoder(),
    url: ({ fiscalcode }) => `${basePath}/sessions/${fiscalcode}/lock`,

    body: () => "{}",

    query: ({ token }) => ({ token })
  };
  const lockUserSession = (withDefaults || identity)(
    createFetchRequestForApi(lockUserSessionT, options)
  );

  const unlockUserSessionT: ReplaceRequestParams<
    UnlockUserSessionT,
    RequestParams<UnlockUserSessionT>
  > = {
    method: "delete",

    headers: ApiHeaderJson,

    response_decoder: unlockUserSessionDefaultDecoder(),
    url: ({ fiscalcode }) => `${basePath}/sessions/${fiscalcode}/lock`,

    query: ({ token }) => ({ token })
  };
  const unlockUserSession = (withDefaults || identity)(
    createFetchRequestForApi(unlockUserSessionT, options)
  );

  return {
    lockUserSession,
    unlockUserSession
  };
}
