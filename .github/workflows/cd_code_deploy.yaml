name: Code Deploy

on:
  workflow_call:  # Manual trigger only
    inputs:
      resource_group_name:
        description: Function App resource group name.
        required: true
        type: string
      app_name:
        description: Function App name.
        required: true
        type: string
      health_check_path:
        description: The health probe path exposed by the Function App.
        type: string
        required: false
        default: '/info'
      environment:
        description: Environment where the artifact will be deployed.
        type: string
        required: true
      use_staging_slot:
        description: True if artifact should be deployed to staging slot
        type: boolean
        required: false
        default: true
      use_private_agent:
        description: Use a private agent to deploy the built artifact.
        type: boolean
        required: false
        default: true

env:
  BUNDLE_NAME: bundle

jobs:
  build:
    name: Build Artifact
    runs-on: ubuntu-20.04
    env:
      WORKSPACE: . # ${{ inputs.workspace_name }}

    steps:
      - name: Check-out code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version-file: ".node-version"
          cache: "yarn"
          cache-dependency-path: "yarn.lock"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build
        run: yarn build

      - name: Build the Function App Artifact
        id: make-function-app-artifact
        run: |
          npm pkg set --json "bundledDependencies"=true
          npm pkg set --json "files"='["**/function.json", "dist", "host.json","extensions.csproj"]'
          npx npm-pack-zip
          package_name=$(jq -r .name package.json)
          mv ${package_name//\/}.zip ${{ env.BUNDLE_NAME }}.zip
          echo "artifact-path=$(realpath ${{ env.BUNDLE_NAME }}.zip)" >> "$GITHUB_OUTPUT"

      - name: Upload Artifact
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: ${{ env.BUNDLE_NAME }}
          path: ${{ steps.make-function-app-artifact.outputs.artifact-path }}
          if-no-files-found: error
          retention-days: 7

  deploy:
    name: Deploy
    needs: [build]
    runs-on: ${{ inputs.use_private_agent == true && 'self-hosted' || 'ubuntu-20.04' }}
    environment: app-${{ inputs.environment }}-cd
    permissions:
      id-token: write
      contents: read
    env:
        RESOURCE_GROUP_NAME: ${{ inputs.resource_group_name }}
        FUNCTION_APP_NAME: ${{ inputs.app_name}}
        USE_STAGING_SLOT: ${{ inputs.use_staging_slot }}
        HEALTH_CHECK_PATH: ${{ inputs.health_check_path }}

    steps:
      - name: checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Download Artifact
        uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4.1.1
        with:
          name: ${{ env.BUNDLE_NAME }}

      - name: Azure Login
        uses: azure/login@v2 # v2.0.0
        env:
          ARM_USE_OIDC: true
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Deploy
        uses: azure/webapps-deploy@v2
        if: ${{ env.USE_STAGING_SLOT == 'false' }}
        with:
          resource-group-name: ${{ env.RESOURCE_GROUP_NAME }}
          app-name: ${{ env.FUNCTION_APP_NAME }}
          package: ${{ env.BUNDLE_NAME }}.zip

      - name: Deploy to Staging Slot
        uses: azure/webapps-deploy@v2
        if: ${{ env.USE_STAGING_SLOT == 'true' }}
        with:
          resource-group-name: ${{ env.RESOURCE_GROUP_NAME }}
          app-name: ${{ env.FUNCTION_APP_NAME }}
          slot-name: staging
          package: ${{ env.BUNDLE_NAME }}.zip

      - name: Ping Staging Health
        if: ${{ env.USE_STAGING_SLOT == 'true' }}
        run: |
          curl \
            --retry 5 \
            --retry-max-time 120 \
            --retry-all-errors \
            -f 'https://${{ env.FUNCTION_APP_NAME }}-staging.azurewebsites.net${{ env.HEALTH_CHECK_PATH }}'

      - name: Swap Staging and Production Slots
        if: ${{ env.USE_STAGING_SLOT == 'true' }}
        run: |
          az webapp deployment slot swap \
            -g ${{ env.RESOURCE_GROUP_NAME }} \
            -n ${{ env.FUNCTION_APP_NAME }} \
            --slot staging \
            --target-slot production