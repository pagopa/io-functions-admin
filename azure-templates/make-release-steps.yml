# Make Release Steps
# Mark a release on the project repository, with version bump and tag,
# and publish a release on Github

parameters:
- name: 'semver'
  type: string
  values:
  - major
  - minor
  - patch
- name: 'gitUsername'
  type: string
- name: 'gitEmail'
  type: string
- name: 'gitHubConnection'
  type: string

- name: 'cache_version_id'
  type: string
  default: $(CACHE_VERSION_ID)

# This is the branch in which we will push the release tag.
# It'll be master, but it can be overridden
# Basically, this variable is used to enforce the fact that we use the very same branch in different steps
- name: 'release_branch'
  type: string
  default: master
  
steps:
- checkout: self
  displayName: 'Checkout'
  clean: true
  persistCredentials: true

# Without this step, changes would be applied to a detatched head
- script: |
    git checkout ${{ parameters.release_branch }}
  displayName: 'Checkout release branch'
      
- task: Cache@2
  inputs:
    key: 'yarn-${{ parameters.cache_version_id }} | "$(Agent.OS)" | yarn.lock'
    restoreKeys: |
      yarn-${{ parameters.cache_version_id }} | "$(Agent.OS)"
    path: $(YARN_CACHE_FOLDER)
  displayName: 'Cache yarn packages'

- task: UseNode@1
  inputs:
    version: $(NODE_VERSION)
  displayName: 'Set up Node.js'
    
- script: |
    yarn install --frozen-lockfile --no-progress --non-interactive --network-concurrency 1
  displayName: 'Install node modules'

- script: |
    git config --global user.email "${{ parameters.gitEmail }}" && git config --global user.name "${{ parameters.gitUsername }}"
  displayName: 'Git setup'  

- script: |
    npm version ${{ parameters.semver }} -m "Bump version to %s [skip ci]"
    NEXT_VERSION=$(node -p "require('./package.json').version")
    RELEASE_TAG="v$NEXT_VERSION-RELEASE"
    git tag $RELEASE_TAG
  displayName: 'Version bump and tag'

- script: |
    git push --follow-tags origin ${{ parameters.release_branch }} 
  displayName: 'Push to the release branch'

- script: |
    NEXT_VERSION=$(node -p "require('./package.json').version")
    HEAD_SHA=$(git rev-parse HEAD)
    TITLE="Release $NEXT_VERSION"
    TAG="v$NEXT_VERSION-RELEASE"
    echo "##vso[task.setvariable variable=title]$TITLE"
    echo "##vso[task.setvariable variable=sha]$HEAD_SHA"
    echo "##vso[task.setvariable variable=tag]$TAG"
  displayName: 'Set release variables'

- task: GitHubRelease@0
  inputs:
    gitHubConnection: ${{ parameters.gitHubConnection }}
    repositoryName: $(Build.Repository.Name)
    action: create
    target: $(sha)
    tagSource: manual
    tag: $(tag)
    title: $(title)
    addChangelog: true