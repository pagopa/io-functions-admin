# Azure DevOps template used to perform all the deploy steps including build. 
#
# Note. Deployment slots let you deploy different versions of your function
# app to different URLs. You can test a certain version and then swap content
# and configuration between slots to have minimal impact to production and also 
# make rollback easily.

parameters:
  - name: 'deployType'
    type: string
    default: deployToStagingSlotAndSwap
    values:
    - deployToProductionSlot
    - deployToStagingSlotAndSwap
    - deployToStagingSlot  
    - deployToTestSlot  
  
  - name: 'azureSubscription'
    type: string
    default: ''
  
  - name: 'resourceGroupName'
    type: string
    default: ''
  
  - name: 'appName'
    type: string
    default: ''

  # min container instance cpu
  - name: 'containerInstanceCpu'
    type: string
    default: '0.5'

  # min container instance memory
  - name: 'containerInstanceMemory'
    type: string
    default: '0.5'

  # attached vnet to the container instance
  - name: 'containerInstanceVNet'
    type: string
    default: 'io-p-vnet-common'

  # container instance subnet
  - name: 'containerInstanceSubnet'
    type: string
    default: 'azure-devops'
    
steps:
  - template: ./make-build-steps.yml
    parameters:
      make: predeploy_build

  # Install functions extensions
  - task: DotNetCoreCLI@2
    inputs:
      command: "build"
      arguments: "-o bin"
  
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      Contents: |
        **/*
        !.git/**/*
        !**/*.js.map
        !**/*.ts
        !.vscode/**/*
        !azure-templates/**/*
        !azure-pipelines.yml
        !.prettierrc
        !.gitignore
        !README.md
        !jest.config.js
        !local.settings.json
        !test
        !tsconfig.json
        !tslint.json
        !yarn.lock
        !Dangerfile.js
        !CODEOWNERS
        !__*/**/*
    displayName: 'Copy deploy files'
  
  # Option 1: standard deployment without slots (i.e. deploy directly to main slot)
  - ${{ if eq(parameters.deployType, 'deployToProductionSlot') }}:
    - task: AzureFunctionApp@1
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        resourceGroupName: '${{ parameters.resourceGroupName }}'
        appType: 'functionApp'
        appName: '${{ parameters.appName }}'
        package: '$(Build.ArtifactStagingDirectory)/'
        deploymentMethod: 'auto'
      displayName: Deploy to production slot
  
  # Option 2: deployment to 'staging' slot only
  - ${{ if eq(parameters.deployType, 'deployToStagingSlot') }}:
    - task: AzureFunctionApp@1
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        resourceGroupName: '${{ parameters.resourceGroupName }}'
        appType: 'functionApp'
        appName: '${{ parameters.appName }}'
        package: '$(Build.ArtifactStagingDirectory)/'
        deploymentMethod: 'auto'
        deployToSlotOrASE: true
        slotName: 'staging'
      displayName: Deploy to staging slot only
  
  # Option 3: deployment with two slots ('staging' and 'production')
  - ${{ if eq(parameters.deployType, 'deployToStagingSlotAndSwap') }}:
    - task: AzureFunctionApp@1  # First step: deploy to 'staging' slot 
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        resourceGroupName: '${{ parameters.resourceGroupName }}'
        appType: 'functionApp'
        appName: '${{ parameters.appName }}'
        package: '$(Build.ArtifactStagingDirectory)/'
        deploymentMethod: 'auto'
        deployToSlotOrASE: true
        slotName: 'staging'
      displayName: Deploy to staging slot

    - task: AzureCLI@2 # Second step: run healthcheck on 'staging' slot
      displayName: Healthcheck
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        failOnStandardError: false
        inlineScript: |     
          # define a temporary container instance name     
          CONTAINER_INSTANCE_NAME="${{ parameters.appName }}-deploy"
          
          # create, run container instance in subnet, and get exit code
          OUTPUT_CREATE=$(az container create \
                           --resource-group '${{ parameters.resourceGroupName }}' \
                           --name ${CONTAINER_INSTANCE_NAME} \
                           --image microsoft/azure-cli:latest \
                           --cpu '${{ parameters.containerInstanceCpu }}' \
                           --memory '${{ parameters.containerInstanceMemory }}' \
                           --restart-policy Never \
                           --vnet '${{ parameters.containerInstanceVNet }}' \
                           --subnet '${{ parameters.containerInstanceSubnet }}' \
                           --command-line "az rest --skip-authorization-header --method get --url 'https://${{ parameters.appName }}-staging.azurewebsites.net/info'" \
                           --output tsv \
                           --query containers[].instanceView.currentState.exitCode)
          
          # print container instance logs
          az container logs --resource-group '${{ parameters.resourceGroupName }}' --name ${CONTAINER_INSTANCE_NAME}
          # delete container instance
          OUTPUT_DELETE=$(az container delete --resource-group ${{ parameters.resourceGroupName }} --name ${CONTAINER_INSTANCE_NAME} --yes)
          # reuse OUTPUT_CREATE as task exit code to interrupt pipeline if result is not 0.
          exit $OUTPUT_CREATE
  
    - task: AzureAppServiceManage@0   # Third step: swap 'staging' with 'production' slot
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        resourceGroupName: '${{ parameters.resourceGroupName }}'
        webAppName: '${{ parameters.appName }}'
        sourceSlot: staging
        swapWithProduction: true
      displayName: Swap with production slot
  
  # Option 4: deployment to 'test' slot only
  - ${{ if eq(parameters.deployType, 'deployToTestSlot') }}:
    - task: AzureFunctionApp@1
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        resourceGroupName: '${{ parameters.resourceGroupName }}'
        appType: 'functionApp'
        appName: '${{ parameters.appName }}'
        package: '$(Build.ArtifactStagingDirectory)/'
        deploymentMethod: 'auto'
        deployToSlotOrASE: true
        slotName: 'test'
      displayName: Deploy to test slot
