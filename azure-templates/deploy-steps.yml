# Azure DevOps template used to perform all the deploy steps including build.
#
# Note. Deployment slots let you deploy different versions of your function
# app to different URLs. You can test a certain version and then swap content
# and configuration between slots to have minimal impact to production and also
# make rollback easily.

parameters:
  - name: 'deployType'
    type: string
    default: deployToStagingSlotAndSwap
    values:
    - deployToProductionSlot
    - deployToStagingSlotAndSwap
    - deployToStagingSlot
    - deployToTestSlot

  - name: 'azureSubscription'
    type: string
    default: ''

  - name: 'resourceGroupName'
    type: string
    default: ''

  - name: 'appName'
    type: string
    default: ''

  # full endpoint to perform healthcheck against,
  - name: 'healthcheckEndpoint'
    type: string

  # the resource group must be the same where vnet is created
  - name: 'containerInstanceResourceGroup'
    type: string

  # attached vnet to the container instance
  - name: 'containerInstanceVNet'
    type: string

  # container instance subnet
  - name: 'containerInstanceSubnet'
    type: string

  # the branch, tag or commit to deploy
  - name: 'gitReference'
    type: string
    default: $(Build.SourceVersion)

steps:
  - template: ./make-build-steps.yml
    parameters:
      make: predeploy_build
      gitReference: ${{ parameters.gitReference }}

  # Install functions extensions
  - task: DotNetCoreCLI@2
    inputs:
      command: "build"
      arguments: "-o bin"

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      Contents: |
        **/*
        !.git/**/*
        !**/*.js.map
        !**/*.ts
        !.vscode/**/*
        !azure-templates/**/*
        !azure-pipelines.yml
        !.prettierrc
        !.gitignore
        !README.md
        !jest.config.js
        !local.settings.json
        !test
        !tsconfig.json
        !tslint.json
        !yarn.lock
        !Dangerfile.js
        !CODEOWNERS
        !__*/**/*
    displayName: 'Copy deploy files'

  # Option 1: standard deployment without slots (i.e. deploy directly to main slot)
  - ${{ if eq(parameters.deployType, 'deployToProductionSlot') }}:
    - task: AzureFunctionApp@1
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        resourceGroupName: '${{ parameters.resourceGroupName }}'
        appType: 'functionApp'
        appName: '${{ parameters.appName }}'
        package: '$(Build.ArtifactStagingDirectory)/'
        deploymentMethod: 'auto'
      displayName: Deploy to production slot

  # Option 2: deployment to 'staging' slot only
  - ${{ if eq(parameters.deployType, 'deployToStagingSlot') }}:
    - task: AzureFunctionApp@1
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        resourceGroupName: '${{ parameters.resourceGroupName }}'
        appType: 'functionApp'
        appName: '${{ parameters.appName }}'
        package: '$(Build.ArtifactStagingDirectory)/'
        deploymentMethod: 'auto'
        deployToSlotOrASE: true
        slotName: 'staging'
      displayName: Deploy to staging slot only

  # Option 3: deployment with two slots ('staging' and 'production')
  - ${{ if eq(parameters.deployType, 'deployToStagingSlotAndSwap') }}:
    # First step: deploy to 'staging' slot
    - task: AzureFunctionApp@1
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        resourceGroupName: '${{ parameters.resourceGroupName }}'
        appType: 'functionApp'
        appName: '${{ parameters.appName }}'
        package: '$(Build.ArtifactStagingDirectory)/'
        deploymentMethod: 'auto'
        deployToSlotOrASE: true
        slotName: 'staging'
      displayName: Deploy to staging slot

    # Second step: check the app is working
    - template: templates/rest-healthcheck/template.yaml@pagopaCommons
      parameters:
        azureSubscription: '${{ parameters.azureSubscription }}'
        appName: '${{ parameters.appName }}'
        endpoint: '${{ parameters.healthcheckEndpoint }}'
        containerInstanceResourceGroup: '${{ parameters.containerInstanceResourceGroup }}'
        containerInstanceVNet: '${{ parameters.containerInstanceVNet }}'
        containerInstanceSubnet: '${{ parameters.containerInstanceSubnet }}'

    # Third step: swap 'staging' with 'production' slot
    - task: AzureAppServiceManage@0
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        resourceGroupName: '${{ parameters.resourceGroupName }}'
        webAppName: '${{ parameters.appName }}'
        sourceSlot: staging
        swapWithProduction: true
      displayName: Swap with production slot

  # Option 4: deployment to 'test' slot only
  - ${{ if eq(parameters.deployType, 'deployToTestSlot') }}:
    - task: AzureFunctionApp@1
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        resourceGroupName: '${{ parameters.resourceGroupName }}'
        appType: 'functionApp'
        appName: '${{ parameters.appName }}'
        package: '$(Build.ArtifactStagingDirectory)/'
        deploymentMethod: 'auto'
        deployToSlotOrASE: true
        slotName: 'test'
      displayName: Deploy to test slot
