# Azure DevOps pipeline to release a new version and deploy to production.

variables:
  HEALTHCHECK_PATH: '/info'

parameters:
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: minor

# Only manual activations are intended
trigger: none
pr: none

# This pipeline has been implemented to be run on hosted agent pools based both
# on 'windows' and 'ubuntu' virtual machine images and using the scripts defined
# in the package.json file. Since we are deploying on Azure functions on Linux
# runtime, the pipeline is currently configured to use an ubuntu hosted image for
# the build and deploy.
pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories: 
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v18
      endpoint: 'pagopa'

stages:

  # Create a relase
  # Activated when ONE OF these are met:
  # - is on branch master 
  # - is a tag in the form v{version}-RELEASE
  - stage: Release
    condition:
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          and(
            startsWith(variables['Build.SourceBranch'], 'refs/tags'),
            endsWith(variables['Build.SourceBranch'], '-RELEASE')
          )
        )
      )
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: make_release
        steps:
        - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              persistCredentials: true
          - template: templates/node-github-release/template.yaml@pagopaCommons
            parameters:
              semver: '${{ parameters.RELEASE_SEMVER }}'
              gitEmail: $(GIT_EMAIL)
              gitUsername: $(GIT_USERNAME)
              gitHubConnection: $(GITHUB_CONNECTION)

        - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/master') }}:
          - script: |
              echo "We assume this reference to be a valid release: $(Build.SourceBranch). Therefore, there is no need to bundle a new release."
            displayName: 'Skip release bundle'

  # Prepare Artifact
  - stage: Deploy_staging
    dependsOn:
      - Release
    jobs:
      - job: 'prepare_artifact_and_deploy'
        steps:
          # Build application
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              # On the assumption that this stage is executed only when Relase stage is,
              #  with this parameter we set the reference the deploy script must pull changes from.
              # The branch/tag name is calculated from the source branch
              #  ex: Build.SourceBranch=refs/heads/master --> master
              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --> v1.2.3-RELEASE
              gitReference: ${{ replace(replace(variables['Build.SourceBranch'], 'refs/tags/', ''), 'refs/heads/', '') }}
          - script: |
              yarn predeploy
            displayName: 'Build'
          # Install functions extensions
          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              arguments: "-o bin"
          # Copy application to
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'
              Contents: |
                **/*
                !.git/**/*
                !**/*.js.map
                !**/*.ts
                !.vscode/**/*
                !azure-templates/**/*
                !azure-pipelines.yml
                !.prettierrc
                !.gitignore
                !README.md
                !jest.config.js
                !local.settings.json
                !test
                !tsconfig.json
            displayName: 'Copy deploy files'
            
          - task: AzureFunctionApp@1
            inputs:
              azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
              resourceGroupName: 'io-p-admin-rg'
              appType: 'functionApp'
              appName: 'io-p-admin-fn'
              package: '$(Build.ArtifactStagingDirectory)/'
              deploymentMethod: 'auto'
              deployToSlotOrASE: true
              slotName: 'staging'
            displayName: Deploy to staging slot

  # Check that the staging instance is healthy
  - stage: Healthcheck
    pool:
      name: $(AGENT_POOL)
    dependsOn:
      - Deploy_staging
    jobs:
      - job: 'do_healthcheck'
        steps:
          - checkout: none
          - script: |
              # fails if response status is not 2xx
              curl -f 'https://io-p-admin-fn-staging.azurewebsites.net/$(HEALTHCHECK_PATH)'
            displayName: 'Healthcheck'

  # Promote the staging instance to production
  - stage: Deploy_production
    dependsOn:
      - Healthcheck
      - Deploy_staging
    jobs:
      - job: 'do_deploy'
        steps:  
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
              resourceGroupName: 'io-p-admin-rg'
              webAppName: 'io-p-admin-fn'
              sourceSlot: staging
              swapWithProduction: true
            displayName: Swap with production slot

            
  # Publish client SDK to NPM
  - stage: PublishClientSDKtoNPM
    dependsOn: Release
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: publish_SDK
        steps:
        # Template for generating and deploying client SDk to NPM
        - template: templates/client-sdk-publish/template.yaml@pagopaCommons
          parameters:
            openapiSpecPath: 'openapi/index.yaml'
